# @file config/config.yaml
# @description Configuration for the Cablegate PDF Dataset Project
# @version 1.0.8
# @license MIT

dataset:
  name: "cablegate-pdf-dataset"
  type: "parquet"
paths:
  root: "."
  assets: "./assets"
  data: "./data"
  raw: "./data/raw"
  process: "./data/process"
  database: "./data/db"
  export: "./data/export"
  generate: "./data/generate"
  processed_data: "processed_data"
  processed_data_train: "{{paths.processed_data}}/train"
  templates: "{{paths.assets}}/templates"
database:
  env: "development"
  name: "thinking-dataset"
  type: "sqlite"
  url: "{{database.type}}:///data/db/{{database.name}}.db"
  config:
    pool_size: 5
    max_overflow: 10
    connect_timeout: 30
    read_timeout: 30
    log_queries: True
files:
  include:
  - "train-00000-of-00001.{{dataset.type}}"
  exclude:
  - "cleaned_data.{{dataset.type}}"
  load:
  - "{{paths.process}}/{file_name}"
providers:
- provider:
    name: "localhost"
    type: "ollama"
    url: "http://localhost:11434"
    config:
      model: "llama3.1"
      stream: False
      options:
        num_ctx: 32384
        temperature: 0.8
        repeat_penalty: 1.2
        num_thread: 8
pipelines:
- pipeline:
    name: "process"
    description: "Default prepare pipeline"
    config:
      prepare_file: "{file_base}{file_ext}"
    pipes:
    - pipe:
        type: "SubsetPipe"
        config:
          rows: [ 0, 100 ]
          columns: [ "all" ]
    - pipe:
        type: "AddIdPipe"
        config: {}
    - pipe:
        type: "DropColumnsPipe"
        config:
          columns: [ "file_name" ]
    - pipe:
        type: "RemapColumnsPipe"
        config:
          column_mapping:
            pdf_content: cable
          column_order:
          - id
          - cable
    - pipe:
        type: "RemoveDuplicatesPipe"
        config:
          columns: [ "auto" ]
    - pipe:
        type: "HandleMissingValuesPipe"
        config:
          columns: [ "auto" ]
          remove_partials: True
          allow_empty: False
    - pipe:
        type: "NormalizeTextPipe"
        config:
          columns: [ "cable" ]
          contractions:
            "ain't": "am not"
          terms:
            "i.e": "that is "
    - pipe:
        type: "FilterBySizePipe"
        config:
          column_name: "cable"
          min_size: 500
          max_size: 0
    - pipe:
        type: "ChunkingPipe"
        config:
          columns: [ "cable" ]
          min_chunk_size: 500
          max_chunk_size: 5000
- pipeline:
    name: "export"
    description: "Default export pipeline"
    config: {}
    pipes:
    - pipe:
        type: "ExportTablesPipe"
        config:
          tables: [ "all" ]
          columns: [ "auto" ]
          shard_size: 1000000
          pattern: "{{dataset.name}}-{split_name}-{split_info}.{{dataset.type}}"
          path: "{{paths.export}}/{{paths.processed_data_train}}"
          schema: [ "id", "cable" ]
          drop_columns: True
          fill_value: "null"
- pipeline:
    name: "upload"
    description: "Default upload pipeline"
    config: {}
    pipes:
    - pipe:
        type: "FileExtractorPipe"
        config:
          path: "{{paths.export}}/{{paths.processed_data_train}}"
          filter: "{{dataset.type}}"
    - pipe:
        type: "FileUploadHfApiPipe"
        config:
          org: "${HF_ORG}"
          user: "${HF_USER}"
          token: "${HF_WRITE_TOKEN}"
          dataset: "{{dataset.name}}"
          repo_type: "dataset"
          remote_path: "{{paths.processed_data_train}}"
          dry_run: False
- pipeline:
    name: "generate"
    description: "Generate synthetic data pipeline"
    config: {}
    pipes:
    - pipe:
        type: "QueryGenerationPipe"
        config:
          input:
          - table: "train-00000-of-00001"
            columns: [ "cable" ]
          output:
          - table: "cables"
            columns: [ "query" ]
          seed_amount: 3
          seed_length: 50000
          seed_offset: 0
          batch_size: 1
          if_exists: "replace"
          prompt:
            template: "{{paths.templates}}/thinking.md"
    - pipe:
        type: "ResponseGenerationPipe"
        config:
          input:
          - table: "cables"
            columns: [ "query" ]
          output:
          - table: "cables"
            columns: [ "thinking" ]
          provider: "localhost"
          if_exists: "replace"
          prompt:
            template: "{{paths.templates}}/thinking.md"
